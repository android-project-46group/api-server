// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Locale is an object representing the database table.
type Locale struct {
	LocaleID int    `boil:"locale_id" json:"locale_id" toml:"locale_id" yaml:"locale_id"`
	Name     string `boil:"name" json:"name" toml:"name" yaml:"name"`

	R *localeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L localeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var LocaleColumns = struct {
	LocaleID string
	Name     string
}{
	LocaleID: "locale_id",
	Name:     "name",
}

var LocaleTableColumns = struct {
	LocaleID string
	Name     string
}{
	LocaleID: "locales.locale_id",
	Name:     "locales.name",
}

// Generated where

var LocaleWhere = struct {
	LocaleID whereHelperint
	Name     whereHelperstring
}{
	LocaleID: whereHelperint{field: "\"locales\".\"locale_id\""},
	Name:     whereHelperstring{field: "\"locales\".\"name\""},
}

// LocaleRels is where relationship names are stored.
var LocaleRels = struct {
	MemberInfos string
}{
	MemberInfos: "MemberInfos",
}

// localeR is where relationships are stored.
type localeR struct {
	MemberInfos MemberInfoSlice `boil:"MemberInfos" json:"MemberInfos" toml:"MemberInfos" yaml:"MemberInfos"`
}

// NewStruct creates a new relationship struct
func (*localeR) NewStruct() *localeR {
	return &localeR{}
}

func (r *localeR) GetMemberInfos() MemberInfoSlice {
	if r == nil {
		return nil
	}
	return r.MemberInfos
}

// localeL is where Load methods for each relationship are stored.
type localeL struct{}

var (
	localeAllColumns            = []string{"locale_id", "name"}
	localeColumnsWithoutDefault = []string{"name"}
	localeColumnsWithDefault    = []string{"locale_id"}
	localePrimaryKeyColumns     = []string{"locale_id"}
	localeGeneratedColumns      = []string{}
)

type (
	// LocaleSlice is an alias for a slice of pointers to Locale.
	// This should almost always be used instead of []Locale.
	LocaleSlice []*Locale
	// LocaleHook is the signature for custom Locale hook methods
	LocaleHook func(context.Context, boil.ContextExecutor, *Locale) error

	localeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	localeType                 = reflect.TypeOf(&Locale{})
	localeMapping              = queries.MakeStructMapping(localeType)
	localePrimaryKeyMapping, _ = queries.BindMapping(localeType, localeMapping, localePrimaryKeyColumns)
	localeInsertCacheMut       sync.RWMutex
	localeInsertCache          = make(map[string]insertCache)
	localeUpdateCacheMut       sync.RWMutex
	localeUpdateCache          = make(map[string]updateCache)
	localeUpsertCacheMut       sync.RWMutex
	localeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var localeAfterSelectHooks []LocaleHook

var localeBeforeInsertHooks []LocaleHook
var localeAfterInsertHooks []LocaleHook

var localeBeforeUpdateHooks []LocaleHook
var localeAfterUpdateHooks []LocaleHook

var localeBeforeDeleteHooks []LocaleHook
var localeAfterDeleteHooks []LocaleHook

var localeBeforeUpsertHooks []LocaleHook
var localeAfterUpsertHooks []LocaleHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Locale) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range localeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Locale) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range localeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Locale) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range localeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Locale) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range localeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Locale) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range localeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Locale) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range localeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Locale) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range localeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Locale) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range localeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Locale) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range localeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddLocaleHook registers your hook function for all future operations.
func AddLocaleHook(hookPoint boil.HookPoint, localeHook LocaleHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		localeAfterSelectHooks = append(localeAfterSelectHooks, localeHook)
	case boil.BeforeInsertHook:
		localeBeforeInsertHooks = append(localeBeforeInsertHooks, localeHook)
	case boil.AfterInsertHook:
		localeAfterInsertHooks = append(localeAfterInsertHooks, localeHook)
	case boil.BeforeUpdateHook:
		localeBeforeUpdateHooks = append(localeBeforeUpdateHooks, localeHook)
	case boil.AfterUpdateHook:
		localeAfterUpdateHooks = append(localeAfterUpdateHooks, localeHook)
	case boil.BeforeDeleteHook:
		localeBeforeDeleteHooks = append(localeBeforeDeleteHooks, localeHook)
	case boil.AfterDeleteHook:
		localeAfterDeleteHooks = append(localeAfterDeleteHooks, localeHook)
	case boil.BeforeUpsertHook:
		localeBeforeUpsertHooks = append(localeBeforeUpsertHooks, localeHook)
	case boil.AfterUpsertHook:
		localeAfterUpsertHooks = append(localeAfterUpsertHooks, localeHook)
	}
}

// One returns a single locale record from the query.
func (q localeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Locale, error) {
	o := &Locale{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for locales")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Locale records from the query.
func (q localeQuery) All(ctx context.Context, exec boil.ContextExecutor) (LocaleSlice, error) {
	var o []*Locale

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Locale slice")
	}

	if len(localeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Locale records in the query.
func (q localeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count locales rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q localeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if locales exists")
	}

	return count > 0, nil
}

// MemberInfos retrieves all the member_info's MemberInfos with an executor.
func (o *Locale) MemberInfos(mods ...qm.QueryMod) memberInfoQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"member_infos\".\"locale_id\"=?", o.LocaleID),
	)

	return MemberInfos(queryMods...)
}

// LoadMemberInfos allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (localeL) LoadMemberInfos(ctx context.Context, e boil.ContextExecutor, singular bool, maybeLocale interface{}, mods queries.Applicator) error {
	var slice []*Locale
	var object *Locale

	if singular {
		object = maybeLocale.(*Locale)
	} else {
		slice = *maybeLocale.(*[]*Locale)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &localeR{}
		}
		args = append(args, object.LocaleID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &localeR{}
			}

			for _, a := range args {
				if a == obj.LocaleID {
					continue Outer
				}
			}

			args = append(args, obj.LocaleID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`member_infos`),
		qm.WhereIn(`member_infos.locale_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load member_infos")
	}

	var resultSlice []*MemberInfo
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice member_infos")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on member_infos")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for member_infos")
	}

	if len(memberInfoAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.MemberInfos = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &memberInfoR{}
			}
			foreign.R.Locale = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.LocaleID == foreign.LocaleID {
				local.R.MemberInfos = append(local.R.MemberInfos, foreign)
				if foreign.R == nil {
					foreign.R = &memberInfoR{}
				}
				foreign.R.Locale = local
				break
			}
		}
	}

	return nil
}

// AddMemberInfos adds the given related objects to the existing relationships
// of the locale, optionally inserting them as new records.
// Appends related to o.R.MemberInfos.
// Sets related.R.Locale appropriately.
func (o *Locale) AddMemberInfos(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*MemberInfo) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.LocaleID = o.LocaleID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"member_infos\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"locale_id"}),
				strmangle.WhereClause("\"", "\"", 2, memberInfoPrimaryKeyColumns),
			)
			values := []interface{}{o.LocaleID, rel.MemberInfoID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.LocaleID = o.LocaleID
		}
	}

	if o.R == nil {
		o.R = &localeR{
			MemberInfos: related,
		}
	} else {
		o.R.MemberInfos = append(o.R.MemberInfos, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &memberInfoR{
				Locale: o,
			}
		} else {
			rel.R.Locale = o
		}
	}
	return nil
}

// Locales retrieves all the records using an executor.
func Locales(mods ...qm.QueryMod) localeQuery {
	mods = append(mods, qm.From("\"locales\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"locales\".*"})
	}

	return localeQuery{q}
}

// FindLocale retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindLocale(ctx context.Context, exec boil.ContextExecutor, localeID int, selectCols ...string) (*Locale, error) {
	localeObj := &Locale{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"locales\" where \"locale_id\"=$1", sel,
	)

	q := queries.Raw(query, localeID)

	err := q.Bind(ctx, exec, localeObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from locales")
	}

	if err = localeObj.doAfterSelectHooks(ctx, exec); err != nil {
		return localeObj, err
	}

	return localeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Locale) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no locales provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(localeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	localeInsertCacheMut.RLock()
	cache, cached := localeInsertCache[key]
	localeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			localeAllColumns,
			localeColumnsWithDefault,
			localeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(localeType, localeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(localeType, localeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"locales\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"locales\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into locales")
	}

	if !cached {
		localeInsertCacheMut.Lock()
		localeInsertCache[key] = cache
		localeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Locale.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Locale) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	localeUpdateCacheMut.RLock()
	cache, cached := localeUpdateCache[key]
	localeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			localeAllColumns,
			localePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update locales, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"locales\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, localePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(localeType, localeMapping, append(wl, localePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update locales row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for locales")
	}

	if !cached {
		localeUpdateCacheMut.Lock()
		localeUpdateCache[key] = cache
		localeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q localeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for locales")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for locales")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o LocaleSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), localePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"locales\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, localePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in locale slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all locale")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Locale) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no locales provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(localeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	localeUpsertCacheMut.RLock()
	cache, cached := localeUpsertCache[key]
	localeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			localeAllColumns,
			localeColumnsWithDefault,
			localeColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			localeAllColumns,
			localePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert locales, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(localePrimaryKeyColumns))
			copy(conflict, localePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"locales\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(localeType, localeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(localeType, localeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert locales")
	}

	if !cached {
		localeUpsertCacheMut.Lock()
		localeUpsertCache[key] = cache
		localeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Locale record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Locale) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Locale provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), localePrimaryKeyMapping)
	sql := "DELETE FROM \"locales\" WHERE \"locale_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from locales")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for locales")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q localeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no localeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from locales")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for locales")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o LocaleSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(localeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), localePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"locales\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, localePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from locale slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for locales")
	}

	if len(localeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Locale) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindLocale(ctx, exec, o.LocaleID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *LocaleSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := LocaleSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), localePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"locales\".* FROM \"locales\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, localePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in LocaleSlice")
	}

	*o = slice

	return nil
}

// LocaleExists checks if the Locale row exists.
func LocaleExists(ctx context.Context, exec boil.ContextExecutor, localeID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"locales\" where \"locale_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, localeID)
	}
	row := exec.QueryRowContext(ctx, sql, localeID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if locales exists")
	}

	return exists, nil
}
