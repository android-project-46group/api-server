// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Song is an object representing the database table.
type Song struct {
	SongID      int         `boil:"song_id" json:"song_id" toml:"song_id" yaml:"song_id"`
	GroupID     int         `boil:"group_id" json:"group_id" toml:"group_id" yaml:"group_id"`
	FormationID int         `boil:"formation_id" json:"formation_id" toml:"formation_id" yaml:"formation_id"`
	Title       null.String `boil:"title" json:"title,omitempty" toml:"title" yaml:"title,omitempty"`
	SingleNum   null.String `boil:"single_num" json:"single_num,omitempty" toml:"single_num" yaml:"single_num,omitempty"`

	R *songR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L songL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SongColumns = struct {
	SongID      string
	GroupID     string
	FormationID string
	Title       string
	SingleNum   string
}{
	SongID:      "song_id",
	GroupID:     "group_id",
	FormationID: "formation_id",
	Title:       "title",
	SingleNum:   "single_num",
}

var SongTableColumns = struct {
	SongID      string
	GroupID     string
	FormationID string
	Title       string
	SingleNum   string
}{
	SongID:      "songs.song_id",
	GroupID:     "songs.group_id",
	FormationID: "songs.formation_id",
	Title:       "songs.title",
	SingleNum:   "songs.single_num",
}

// Generated where

var SongWhere = struct {
	SongID      whereHelperint
	GroupID     whereHelperint
	FormationID whereHelperint
	Title       whereHelpernull_String
	SingleNum   whereHelpernull_String
}{
	SongID:      whereHelperint{field: "\"songs\".\"song_id\""},
	GroupID:     whereHelperint{field: "\"songs\".\"group_id\""},
	FormationID: whereHelperint{field: "\"songs\".\"formation_id\""},
	Title:       whereHelpernull_String{field: "\"songs\".\"title\""},
	SingleNum:   whereHelpernull_String{field: "\"songs\".\"single_num\""},
}

// SongRels is where relationship names are stored.
var SongRels = struct {
	Formation string
	Group     string
	Positions string
}{
	Formation: "Formation",
	Group:     "Group",
	Positions: "Positions",
}

// songR is where relationships are stored.
type songR struct {
	Formation *Formation    `boil:"Formation" json:"Formation" toml:"Formation" yaml:"Formation"`
	Group     *Group        `boil:"Group" json:"Group" toml:"Group" yaml:"Group"`
	Positions PositionSlice `boil:"Positions" json:"Positions" toml:"Positions" yaml:"Positions"`
}

// NewStruct creates a new relationship struct
func (*songR) NewStruct() *songR {
	return &songR{}
}

// songL is where Load methods for each relationship are stored.
type songL struct{}

var (
	songAllColumns            = []string{"song_id", "group_id", "formation_id", "title", "single_num"}
	songColumnsWithoutDefault = []string{"group_id", "formation_id", "title", "single_num"}
	songColumnsWithDefault    = []string{"song_id"}
	songPrimaryKeyColumns     = []string{"song_id"}
)

type (
	// SongSlice is an alias for a slice of pointers to Song.
	// This should almost always be used instead of []Song.
	SongSlice []*Song
	// SongHook is the signature for custom Song hook methods
	SongHook func(context.Context, boil.ContextExecutor, *Song) error

	songQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	songType                 = reflect.TypeOf(&Song{})
	songMapping              = queries.MakeStructMapping(songType)
	songPrimaryKeyMapping, _ = queries.BindMapping(songType, songMapping, songPrimaryKeyColumns)
	songInsertCacheMut       sync.RWMutex
	songInsertCache          = make(map[string]insertCache)
	songUpdateCacheMut       sync.RWMutex
	songUpdateCache          = make(map[string]updateCache)
	songUpsertCacheMut       sync.RWMutex
	songUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var songBeforeInsertHooks []SongHook
var songBeforeUpdateHooks []SongHook
var songBeforeDeleteHooks []SongHook
var songBeforeUpsertHooks []SongHook

var songAfterInsertHooks []SongHook
var songAfterSelectHooks []SongHook
var songAfterUpdateHooks []SongHook
var songAfterDeleteHooks []SongHook
var songAfterUpsertHooks []SongHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Song) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range songBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Song) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range songBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Song) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range songBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Song) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range songBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Song) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range songAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Song) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range songAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Song) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range songAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Song) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range songAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Song) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range songAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSongHook registers your hook function for all future operations.
func AddSongHook(hookPoint boil.HookPoint, songHook SongHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		songBeforeInsertHooks = append(songBeforeInsertHooks, songHook)
	case boil.BeforeUpdateHook:
		songBeforeUpdateHooks = append(songBeforeUpdateHooks, songHook)
	case boil.BeforeDeleteHook:
		songBeforeDeleteHooks = append(songBeforeDeleteHooks, songHook)
	case boil.BeforeUpsertHook:
		songBeforeUpsertHooks = append(songBeforeUpsertHooks, songHook)
	case boil.AfterInsertHook:
		songAfterInsertHooks = append(songAfterInsertHooks, songHook)
	case boil.AfterSelectHook:
		songAfterSelectHooks = append(songAfterSelectHooks, songHook)
	case boil.AfterUpdateHook:
		songAfterUpdateHooks = append(songAfterUpdateHooks, songHook)
	case boil.AfterDeleteHook:
		songAfterDeleteHooks = append(songAfterDeleteHooks, songHook)
	case boil.AfterUpsertHook:
		songAfterUpsertHooks = append(songAfterUpsertHooks, songHook)
	}
}

// One returns a single song record from the query.
func (q songQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Song, error) {
	o := &Song{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for songs")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Song records from the query.
func (q songQuery) All(ctx context.Context, exec boil.ContextExecutor) (SongSlice, error) {
	var o []*Song

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Song slice")
	}

	if len(songAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Song records in the query.
func (q songQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count songs rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q songQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if songs exists")
	}

	return count > 0, nil
}

// Formation pointed to by the foreign key.
func (o *Song) Formation(mods ...qm.QueryMod) formationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"formation_id\" = ?", o.FormationID),
	}

	queryMods = append(queryMods, mods...)

	query := Formations(queryMods...)
	queries.SetFrom(query.Query, "\"formations\"")

	return query
}

// Group pointed to by the foreign key.
func (o *Song) Group(mods ...qm.QueryMod) groupQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"group_id\" = ?", o.GroupID),
	}

	queryMods = append(queryMods, mods...)

	query := Groups(queryMods...)
	queries.SetFrom(query.Query, "\"groups\"")

	return query
}

// Positions retrieves all the position's Positions with an executor.
func (o *Song) Positions(mods ...qm.QueryMod) positionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"positions\".\"song_id\"=?", o.SongID),
	)

	query := Positions(queryMods...)
	queries.SetFrom(query.Query, "\"positions\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"positions\".*"})
	}

	return query
}

// LoadFormation allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (songL) LoadFormation(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSong interface{}, mods queries.Applicator) error {
	var slice []*Song
	var object *Song

	if singular {
		object = maybeSong.(*Song)
	} else {
		slice = *maybeSong.(*[]*Song)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &songR{}
		}
		args = append(args, object.FormationID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &songR{}
			}

			for _, a := range args {
				if a == obj.FormationID {
					continue Outer
				}
			}

			args = append(args, obj.FormationID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`formations`),
		qm.WhereIn(`formations.formation_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Formation")
	}

	var resultSlice []*Formation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Formation")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for formations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for formations")
	}

	if len(songAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Formation = foreign
		if foreign.R == nil {
			foreign.R = &formationR{}
		}
		foreign.R.Songs = append(foreign.R.Songs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FormationID == foreign.FormationID {
				local.R.Formation = foreign
				if foreign.R == nil {
					foreign.R = &formationR{}
				}
				foreign.R.Songs = append(foreign.R.Songs, local)
				break
			}
		}
	}

	return nil
}

// LoadGroup allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (songL) LoadGroup(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSong interface{}, mods queries.Applicator) error {
	var slice []*Song
	var object *Song

	if singular {
		object = maybeSong.(*Song)
	} else {
		slice = *maybeSong.(*[]*Song)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &songR{}
		}
		args = append(args, object.GroupID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &songR{}
			}

			for _, a := range args {
				if a == obj.GroupID {
					continue Outer
				}
			}

			args = append(args, obj.GroupID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`groups`),
		qm.WhereIn(`groups.group_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Group")
	}

	var resultSlice []*Group
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Group")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for groups")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for groups")
	}

	if len(songAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Group = foreign
		if foreign.R == nil {
			foreign.R = &groupR{}
		}
		foreign.R.Songs = append(foreign.R.Songs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.GroupID == foreign.GroupID {
				local.R.Group = foreign
				if foreign.R == nil {
					foreign.R = &groupR{}
				}
				foreign.R.Songs = append(foreign.R.Songs, local)
				break
			}
		}
	}

	return nil
}

// LoadPositions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (songL) LoadPositions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSong interface{}, mods queries.Applicator) error {
	var slice []*Song
	var object *Song

	if singular {
		object = maybeSong.(*Song)
	} else {
		slice = *maybeSong.(*[]*Song)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &songR{}
		}
		args = append(args, object.SongID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &songR{}
			}

			for _, a := range args {
				if a == obj.SongID {
					continue Outer
				}
			}

			args = append(args, obj.SongID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`positions`),
		qm.WhereIn(`positions.song_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load positions")
	}

	var resultSlice []*Position
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice positions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on positions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for positions")
	}

	if len(positionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Positions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &positionR{}
			}
			foreign.R.Song = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.SongID == foreign.SongID {
				local.R.Positions = append(local.R.Positions, foreign)
				if foreign.R == nil {
					foreign.R = &positionR{}
				}
				foreign.R.Song = local
				break
			}
		}
	}

	return nil
}

// SetFormation of the song to the related item.
// Sets o.R.Formation to related.
// Adds o to related.R.Songs.
func (o *Song) SetFormation(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Formation) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"songs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"formation_id"}),
		strmangle.WhereClause("\"", "\"", 2, songPrimaryKeyColumns),
	)
	values := []interface{}{related.FormationID, o.SongID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FormationID = related.FormationID
	if o.R == nil {
		o.R = &songR{
			Formation: related,
		}
	} else {
		o.R.Formation = related
	}

	if related.R == nil {
		related.R = &formationR{
			Songs: SongSlice{o},
		}
	} else {
		related.R.Songs = append(related.R.Songs, o)
	}

	return nil
}

// SetGroup of the song to the related item.
// Sets o.R.Group to related.
// Adds o to related.R.Songs.
func (o *Song) SetGroup(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Group) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"songs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"group_id"}),
		strmangle.WhereClause("\"", "\"", 2, songPrimaryKeyColumns),
	)
	values := []interface{}{related.GroupID, o.SongID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.GroupID = related.GroupID
	if o.R == nil {
		o.R = &songR{
			Group: related,
		}
	} else {
		o.R.Group = related
	}

	if related.R == nil {
		related.R = &groupR{
			Songs: SongSlice{o},
		}
	} else {
		related.R.Songs = append(related.R.Songs, o)
	}

	return nil
}

// AddPositions adds the given related objects to the existing relationships
// of the song, optionally inserting them as new records.
// Appends related to o.R.Positions.
// Sets related.R.Song appropriately.
func (o *Song) AddPositions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Position) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SongID = o.SongID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"positions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"song_id"}),
				strmangle.WhereClause("\"", "\"", 2, positionPrimaryKeyColumns),
			)
			values := []interface{}{o.SongID, rel.PositionID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SongID = o.SongID
		}
	}

	if o.R == nil {
		o.R = &songR{
			Positions: related,
		}
	} else {
		o.R.Positions = append(o.R.Positions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &positionR{
				Song: o,
			}
		} else {
			rel.R.Song = o
		}
	}
	return nil
}

// Songs retrieves all the records using an executor.
func Songs(mods ...qm.QueryMod) songQuery {
	mods = append(mods, qm.From("\"songs\""))
	return songQuery{NewQuery(mods...)}
}

// FindSong retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSong(ctx context.Context, exec boil.ContextExecutor, songID int, selectCols ...string) (*Song, error) {
	songObj := &Song{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"songs\" where \"song_id\"=$1", sel,
	)

	q := queries.Raw(query, songID)

	err := q.Bind(ctx, exec, songObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from songs")
	}

	if err = songObj.doAfterSelectHooks(ctx, exec); err != nil {
		return songObj, err
	}

	return songObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Song) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no songs provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(songColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	songInsertCacheMut.RLock()
	cache, cached := songInsertCache[key]
	songInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			songAllColumns,
			songColumnsWithDefault,
			songColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(songType, songMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(songType, songMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"songs\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"songs\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into songs")
	}

	if !cached {
		songInsertCacheMut.Lock()
		songInsertCache[key] = cache
		songInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Song.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Song) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	songUpdateCacheMut.RLock()
	cache, cached := songUpdateCache[key]
	songUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			songAllColumns,
			songPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update songs, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"songs\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, songPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(songType, songMapping, append(wl, songPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update songs row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for songs")
	}

	if !cached {
		songUpdateCacheMut.Lock()
		songUpdateCache[key] = cache
		songUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q songQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for songs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for songs")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SongSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), songPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"songs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, songPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in song slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all song")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Song) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no songs provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(songColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	songUpsertCacheMut.RLock()
	cache, cached := songUpsertCache[key]
	songUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			songAllColumns,
			songColumnsWithDefault,
			songColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			songAllColumns,
			songPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert songs, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(songPrimaryKeyColumns))
			copy(conflict, songPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"songs\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(songType, songMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(songType, songMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert songs")
	}

	if !cached {
		songUpsertCacheMut.Lock()
		songUpsertCache[key] = cache
		songUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Song record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Song) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Song provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), songPrimaryKeyMapping)
	sql := "DELETE FROM \"songs\" WHERE \"song_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from songs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for songs")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q songQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no songQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from songs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for songs")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SongSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(songBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), songPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"songs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, songPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from song slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for songs")
	}

	if len(songAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Song) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSong(ctx, exec, o.SongID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SongSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SongSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), songPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"songs\".* FROM \"songs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, songPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SongSlice")
	}

	*o = slice

	return nil
}

// SongExists checks if the Song row exists.
func SongExists(ctx context.Context, exec boil.ContextExecutor, songID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"songs\" where \"song_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, songID)
	}
	row := exec.QueryRowContext(ctx, sql, songID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if songs exists")
	}

	return exists, nil
}
