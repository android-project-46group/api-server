// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testLocales(t *testing.T) {
	t.Parallel()

	query := Locales()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testLocalesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Locale{}
	if err = randomize.Struct(seed, o, localeDBTypes, true, localeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Locale struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Locales().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testLocalesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Locale{}
	if err = randomize.Struct(seed, o, localeDBTypes, true, localeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Locale struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Locales().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Locales().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testLocalesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Locale{}
	if err = randomize.Struct(seed, o, localeDBTypes, true, localeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Locale struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := LocaleSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Locales().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testLocalesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Locale{}
	if err = randomize.Struct(seed, o, localeDBTypes, true, localeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Locale struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := LocaleExists(ctx, tx, o.LocaleID)
	if err != nil {
		t.Errorf("Unable to check if Locale exists: %s", err)
	}
	if !e {
		t.Errorf("Expected LocaleExists to return true, but got false.")
	}
}

func testLocalesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Locale{}
	if err = randomize.Struct(seed, o, localeDBTypes, true, localeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Locale struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	localeFound, err := FindLocale(ctx, tx, o.LocaleID)
	if err != nil {
		t.Error(err)
	}

	if localeFound == nil {
		t.Error("want a record, got nil")
	}
}

func testLocalesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Locale{}
	if err = randomize.Struct(seed, o, localeDBTypes, true, localeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Locale struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Locales().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testLocalesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Locale{}
	if err = randomize.Struct(seed, o, localeDBTypes, true, localeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Locale struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Locales().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testLocalesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	localeOne := &Locale{}
	localeTwo := &Locale{}
	if err = randomize.Struct(seed, localeOne, localeDBTypes, false, localeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Locale struct: %s", err)
	}
	if err = randomize.Struct(seed, localeTwo, localeDBTypes, false, localeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Locale struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = localeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = localeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Locales().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testLocalesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	localeOne := &Locale{}
	localeTwo := &Locale{}
	if err = randomize.Struct(seed, localeOne, localeDBTypes, false, localeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Locale struct: %s", err)
	}
	if err = randomize.Struct(seed, localeTwo, localeDBTypes, false, localeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Locale struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = localeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = localeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Locales().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func localeBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Locale) error {
	*o = Locale{}
	return nil
}

func localeAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Locale) error {
	*o = Locale{}
	return nil
}

func localeAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Locale) error {
	*o = Locale{}
	return nil
}

func localeBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Locale) error {
	*o = Locale{}
	return nil
}

func localeAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Locale) error {
	*o = Locale{}
	return nil
}

func localeBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Locale) error {
	*o = Locale{}
	return nil
}

func localeAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Locale) error {
	*o = Locale{}
	return nil
}

func localeBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Locale) error {
	*o = Locale{}
	return nil
}

func localeAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Locale) error {
	*o = Locale{}
	return nil
}

func testLocalesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Locale{}
	o := &Locale{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, localeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Locale object: %s", err)
	}

	AddLocaleHook(boil.BeforeInsertHook, localeBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	localeBeforeInsertHooks = []LocaleHook{}

	AddLocaleHook(boil.AfterInsertHook, localeAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	localeAfterInsertHooks = []LocaleHook{}

	AddLocaleHook(boil.AfterSelectHook, localeAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	localeAfterSelectHooks = []LocaleHook{}

	AddLocaleHook(boil.BeforeUpdateHook, localeBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	localeBeforeUpdateHooks = []LocaleHook{}

	AddLocaleHook(boil.AfterUpdateHook, localeAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	localeAfterUpdateHooks = []LocaleHook{}

	AddLocaleHook(boil.BeforeDeleteHook, localeBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	localeBeforeDeleteHooks = []LocaleHook{}

	AddLocaleHook(boil.AfterDeleteHook, localeAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	localeAfterDeleteHooks = []LocaleHook{}

	AddLocaleHook(boil.BeforeUpsertHook, localeBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	localeBeforeUpsertHooks = []LocaleHook{}

	AddLocaleHook(boil.AfterUpsertHook, localeAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	localeAfterUpsertHooks = []LocaleHook{}
}

func testLocalesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Locale{}
	if err = randomize.Struct(seed, o, localeDBTypes, true, localeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Locale struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Locales().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testLocalesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Locale{}
	if err = randomize.Struct(seed, o, localeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Locale struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(localeColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Locales().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testLocaleToManyMemberInfos(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Locale
	var b, c MemberInfo

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, localeDBTypes, true, localeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Locale struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, memberInfoDBTypes, false, memberInfoColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, memberInfoDBTypes, false, memberInfoColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.LocaleID = a.LocaleID
	c.LocaleID = a.LocaleID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.MemberInfos().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.LocaleID == b.LocaleID {
			bFound = true
		}
		if v.LocaleID == c.LocaleID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := LocaleSlice{&a}
	if err = a.L.LoadMemberInfos(ctx, tx, false, (*[]*Locale)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.MemberInfos); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.MemberInfos = nil
	if err = a.L.LoadMemberInfos(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.MemberInfos); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testLocaleToManyAddOpMemberInfos(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Locale
	var b, c, d, e MemberInfo

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, localeDBTypes, false, strmangle.SetComplement(localePrimaryKeyColumns, localeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*MemberInfo{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, memberInfoDBTypes, false, strmangle.SetComplement(memberInfoPrimaryKeyColumns, memberInfoColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*MemberInfo{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddMemberInfos(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.LocaleID != first.LocaleID {
			t.Error("foreign key was wrong value", a.LocaleID, first.LocaleID)
		}
		if a.LocaleID != second.LocaleID {
			t.Error("foreign key was wrong value", a.LocaleID, second.LocaleID)
		}

		if first.R.Locale != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Locale != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.MemberInfos[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.MemberInfos[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.MemberInfos().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testLocalesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Locale{}
	if err = randomize.Struct(seed, o, localeDBTypes, true, localeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Locale struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testLocalesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Locale{}
	if err = randomize.Struct(seed, o, localeDBTypes, true, localeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Locale struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := LocaleSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testLocalesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Locale{}
	if err = randomize.Struct(seed, o, localeDBTypes, true, localeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Locale struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Locales().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	localeDBTypes = map[string]string{`LocaleID`: `integer`, `Name`: `character varying`}
	_             = bytes.MinRead
)

func testLocalesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(localePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(localeAllColumns) == len(localePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Locale{}
	if err = randomize.Struct(seed, o, localeDBTypes, true, localeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Locale struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Locales().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, localeDBTypes, true, localePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Locale struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testLocalesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(localeAllColumns) == len(localePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Locale{}
	if err = randomize.Struct(seed, o, localeDBTypes, true, localeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Locale struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Locales().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, localeDBTypes, true, localePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Locale struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(localeAllColumns, localePrimaryKeyColumns) {
		fields = localeAllColumns
	} else {
		fields = strmangle.SetComplement(
			localeAllColumns,
			localePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := LocaleSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testLocalesUpsert(t *testing.T) {
	t.Parallel()

	if len(localeAllColumns) == len(localePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Locale{}
	if err = randomize.Struct(seed, &o, localeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Locale struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Locale: %s", err)
	}

	count, err := Locales().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, localeDBTypes, false, localePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Locale struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Locale: %s", err)
	}

	count, err = Locales().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
