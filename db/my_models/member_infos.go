// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// MemberInfo is an object representing the database table.
type MemberInfo struct {
	MemberInfoID int         `boil:"member_info_id" json:"member_info_id" toml:"member_info_id" yaml:"member_info_id"`
	MemberID     int         `boil:"member_id" json:"member_id" toml:"member_id" yaml:"member_id"`
	Birthday     time.Time   `boil:"birthday" json:"birthday" toml:"birthday" yaml:"birthday"`
	BloodType    string      `boil:"blood_type" json:"blood_type" toml:"blood_type" yaml:"blood_type"`
	HeightCM     float64     `boil:"height_cm" json:"height_cm" toml:"height_cm" yaml:"height_cm"`
	Generation   string      `boil:"generation" json:"generation" toml:"generation" yaml:"generation"`
	BlogURL      null.String `boil:"blog_url" json:"blog_url,omitempty" toml:"blog_url" yaml:"blog_url,omitempty"`
	ImgURL       null.String `boil:"img_url" json:"img_url,omitempty" toml:"img_url" yaml:"img_url,omitempty"`
	LocaleID     int         `boil:"locale_id" json:"locale_id" toml:"locale_id" yaml:"locale_id"`

	R *memberInfoR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L memberInfoL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MemberInfoColumns = struct {
	MemberInfoID string
	MemberID     string
	Birthday     string
	BloodType    string
	HeightCM     string
	Generation   string
	BlogURL      string
	ImgURL       string
	LocaleID     string
}{
	MemberInfoID: "member_info_id",
	MemberID:     "member_id",
	Birthday:     "birthday",
	BloodType:    "blood_type",
	HeightCM:     "height_cm",
	Generation:   "generation",
	BlogURL:      "blog_url",
	ImgURL:       "img_url",
	LocaleID:     "locale_id",
}

var MemberInfoTableColumns = struct {
	MemberInfoID string
	MemberID     string
	Birthday     string
	BloodType    string
	HeightCM     string
	Generation   string
	BlogURL      string
	ImgURL       string
	LocaleID     string
}{
	MemberInfoID: "member_infos.member_info_id",
	MemberID:     "member_infos.member_id",
	Birthday:     "member_infos.birthday",
	BloodType:    "member_infos.blood_type",
	HeightCM:     "member_infos.height_cm",
	Generation:   "member_infos.generation",
	BlogURL:      "member_infos.blog_url",
	ImgURL:       "member_infos.img_url",
	LocaleID:     "member_infos.locale_id",
}

// Generated where

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelperfloat64 struct{ field string }

func (w whereHelperfloat64) EQ(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperfloat64) NEQ(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperfloat64) LT(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperfloat64) LTE(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperfloat64) GT(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperfloat64) GTE(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperfloat64) IN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperfloat64) NIN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var MemberInfoWhere = struct {
	MemberInfoID whereHelperint
	MemberID     whereHelperint
	Birthday     whereHelpertime_Time
	BloodType    whereHelperstring
	HeightCM     whereHelperfloat64
	Generation   whereHelperstring
	BlogURL      whereHelpernull_String
	ImgURL       whereHelpernull_String
	LocaleID     whereHelperint
}{
	MemberInfoID: whereHelperint{field: "\"member_infos\".\"member_info_id\""},
	MemberID:     whereHelperint{field: "\"member_infos\".\"member_id\""},
	Birthday:     whereHelpertime_Time{field: "\"member_infos\".\"birthday\""},
	BloodType:    whereHelperstring{field: "\"member_infos\".\"blood_type\""},
	HeightCM:     whereHelperfloat64{field: "\"member_infos\".\"height_cm\""},
	Generation:   whereHelperstring{field: "\"member_infos\".\"generation\""},
	BlogURL:      whereHelpernull_String{field: "\"member_infos\".\"blog_url\""},
	ImgURL:       whereHelpernull_String{field: "\"member_infos\".\"img_url\""},
	LocaleID:     whereHelperint{field: "\"member_infos\".\"locale_id\""},
}

// MemberInfoRels is where relationship names are stored.
var MemberInfoRels = struct {
	Locale string
	Member string
}{
	Locale: "Locale",
	Member: "Member",
}

// memberInfoR is where relationships are stored.
type memberInfoR struct {
	Locale *Locale `boil:"Locale" json:"Locale" toml:"Locale" yaml:"Locale"`
	Member *Member `boil:"Member" json:"Member" toml:"Member" yaml:"Member"`
}

// NewStruct creates a new relationship struct
func (*memberInfoR) NewStruct() *memberInfoR {
	return &memberInfoR{}
}

func (r *memberInfoR) GetLocale() *Locale {
	if r == nil {
		return nil
	}
	return r.Locale
}

func (r *memberInfoR) GetMember() *Member {
	if r == nil {
		return nil
	}
	return r.Member
}

// memberInfoL is where Load methods for each relationship are stored.
type memberInfoL struct{}

var (
	memberInfoAllColumns            = []string{"member_info_id", "member_id", "birthday", "blood_type", "height_cm", "generation", "blog_url", "img_url", "locale_id"}
	memberInfoColumnsWithoutDefault = []string{"member_id", "birthday", "blood_type", "height_cm", "generation", "blog_url", "img_url", "locale_id"}
	memberInfoColumnsWithDefault    = []string{"member_info_id"}
	memberInfoPrimaryKeyColumns     = []string{"member_info_id"}
	memberInfoGeneratedColumns      = []string{}
)

type (
	// MemberInfoSlice is an alias for a slice of pointers to MemberInfo.
	// This should almost always be used instead of []MemberInfo.
	MemberInfoSlice []*MemberInfo
	// MemberInfoHook is the signature for custom MemberInfo hook methods
	MemberInfoHook func(context.Context, boil.ContextExecutor, *MemberInfo) error

	memberInfoQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	memberInfoType                 = reflect.TypeOf(&MemberInfo{})
	memberInfoMapping              = queries.MakeStructMapping(memberInfoType)
	memberInfoPrimaryKeyMapping, _ = queries.BindMapping(memberInfoType, memberInfoMapping, memberInfoPrimaryKeyColumns)
	memberInfoInsertCacheMut       sync.RWMutex
	memberInfoInsertCache          = make(map[string]insertCache)
	memberInfoUpdateCacheMut       sync.RWMutex
	memberInfoUpdateCache          = make(map[string]updateCache)
	memberInfoUpsertCacheMut       sync.RWMutex
	memberInfoUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var memberInfoAfterSelectHooks []MemberInfoHook

var memberInfoBeforeInsertHooks []MemberInfoHook
var memberInfoAfterInsertHooks []MemberInfoHook

var memberInfoBeforeUpdateHooks []MemberInfoHook
var memberInfoAfterUpdateHooks []MemberInfoHook

var memberInfoBeforeDeleteHooks []MemberInfoHook
var memberInfoAfterDeleteHooks []MemberInfoHook

var memberInfoBeforeUpsertHooks []MemberInfoHook
var memberInfoAfterUpsertHooks []MemberInfoHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MemberInfo) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range memberInfoAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MemberInfo) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range memberInfoBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MemberInfo) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range memberInfoAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MemberInfo) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range memberInfoBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MemberInfo) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range memberInfoAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MemberInfo) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range memberInfoBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MemberInfo) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range memberInfoAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MemberInfo) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range memberInfoBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MemberInfo) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range memberInfoAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMemberInfoHook registers your hook function for all future operations.
func AddMemberInfoHook(hookPoint boil.HookPoint, memberInfoHook MemberInfoHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		memberInfoAfterSelectHooks = append(memberInfoAfterSelectHooks, memberInfoHook)
	case boil.BeforeInsertHook:
		memberInfoBeforeInsertHooks = append(memberInfoBeforeInsertHooks, memberInfoHook)
	case boil.AfterInsertHook:
		memberInfoAfterInsertHooks = append(memberInfoAfterInsertHooks, memberInfoHook)
	case boil.BeforeUpdateHook:
		memberInfoBeforeUpdateHooks = append(memberInfoBeforeUpdateHooks, memberInfoHook)
	case boil.AfterUpdateHook:
		memberInfoAfterUpdateHooks = append(memberInfoAfterUpdateHooks, memberInfoHook)
	case boil.BeforeDeleteHook:
		memberInfoBeforeDeleteHooks = append(memberInfoBeforeDeleteHooks, memberInfoHook)
	case boil.AfterDeleteHook:
		memberInfoAfterDeleteHooks = append(memberInfoAfterDeleteHooks, memberInfoHook)
	case boil.BeforeUpsertHook:
		memberInfoBeforeUpsertHooks = append(memberInfoBeforeUpsertHooks, memberInfoHook)
	case boil.AfterUpsertHook:
		memberInfoAfterUpsertHooks = append(memberInfoAfterUpsertHooks, memberInfoHook)
	}
}

// One returns a single memberInfo record from the query.
func (q memberInfoQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MemberInfo, error) {
	o := &MemberInfo{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for member_infos")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all MemberInfo records from the query.
func (q memberInfoQuery) All(ctx context.Context, exec boil.ContextExecutor) (MemberInfoSlice, error) {
	var o []*MemberInfo

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to MemberInfo slice")
	}

	if len(memberInfoAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all MemberInfo records in the query.
func (q memberInfoQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count member_infos rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q memberInfoQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if member_infos exists")
	}

	return count > 0, nil
}

// Locale pointed to by the foreign key.
func (o *MemberInfo) Locale(mods ...qm.QueryMod) localeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"locale_id\" = ?", o.LocaleID),
	}

	queryMods = append(queryMods, mods...)

	return Locales(queryMods...)
}

// Member pointed to by the foreign key.
func (o *MemberInfo) Member(mods ...qm.QueryMod) memberQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"member_id\" = ?", o.MemberID),
	}

	queryMods = append(queryMods, mods...)

	return Members(queryMods...)
}

// LoadLocale allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (memberInfoL) LoadLocale(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMemberInfo interface{}, mods queries.Applicator) error {
	var slice []*MemberInfo
	var object *MemberInfo

	if singular {
		object = maybeMemberInfo.(*MemberInfo)
	} else {
		slice = *maybeMemberInfo.(*[]*MemberInfo)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &memberInfoR{}
		}
		args = append(args, object.LocaleID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &memberInfoR{}
			}

			for _, a := range args {
				if a == obj.LocaleID {
					continue Outer
				}
			}

			args = append(args, obj.LocaleID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`locales`),
		qm.WhereIn(`locales.locale_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Locale")
	}

	var resultSlice []*Locale
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Locale")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for locales")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for locales")
	}

	if len(memberInfoAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Locale = foreign
		if foreign.R == nil {
			foreign.R = &localeR{}
		}
		foreign.R.MemberInfos = append(foreign.R.MemberInfos, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.LocaleID == foreign.LocaleID {
				local.R.Locale = foreign
				if foreign.R == nil {
					foreign.R = &localeR{}
				}
				foreign.R.MemberInfos = append(foreign.R.MemberInfos, local)
				break
			}
		}
	}

	return nil
}

// LoadMember allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (memberInfoL) LoadMember(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMemberInfo interface{}, mods queries.Applicator) error {
	var slice []*MemberInfo
	var object *MemberInfo

	if singular {
		object = maybeMemberInfo.(*MemberInfo)
	} else {
		slice = *maybeMemberInfo.(*[]*MemberInfo)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &memberInfoR{}
		}
		args = append(args, object.MemberID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &memberInfoR{}
			}

			for _, a := range args {
				if a == obj.MemberID {
					continue Outer
				}
			}

			args = append(args, obj.MemberID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`members`),
		qm.WhereIn(`members.member_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Member")
	}

	var resultSlice []*Member
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Member")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for members")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for members")
	}

	if len(memberInfoAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Member = foreign
		if foreign.R == nil {
			foreign.R = &memberR{}
		}
		foreign.R.MemberInfos = append(foreign.R.MemberInfos, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MemberID == foreign.MemberID {
				local.R.Member = foreign
				if foreign.R == nil {
					foreign.R = &memberR{}
				}
				foreign.R.MemberInfos = append(foreign.R.MemberInfos, local)
				break
			}
		}
	}

	return nil
}

// SetLocale of the memberInfo to the related item.
// Sets o.R.Locale to related.
// Adds o to related.R.MemberInfos.
func (o *MemberInfo) SetLocale(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Locale) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"member_infos\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"locale_id"}),
		strmangle.WhereClause("\"", "\"", 2, memberInfoPrimaryKeyColumns),
	)
	values := []interface{}{related.LocaleID, o.MemberInfoID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.LocaleID = related.LocaleID
	if o.R == nil {
		o.R = &memberInfoR{
			Locale: related,
		}
	} else {
		o.R.Locale = related
	}

	if related.R == nil {
		related.R = &localeR{
			MemberInfos: MemberInfoSlice{o},
		}
	} else {
		related.R.MemberInfos = append(related.R.MemberInfos, o)
	}

	return nil
}

// SetMember of the memberInfo to the related item.
// Sets o.R.Member to related.
// Adds o to related.R.MemberInfos.
func (o *MemberInfo) SetMember(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Member) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"member_infos\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"member_id"}),
		strmangle.WhereClause("\"", "\"", 2, memberInfoPrimaryKeyColumns),
	)
	values := []interface{}{related.MemberID, o.MemberInfoID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MemberID = related.MemberID
	if o.R == nil {
		o.R = &memberInfoR{
			Member: related,
		}
	} else {
		o.R.Member = related
	}

	if related.R == nil {
		related.R = &memberR{
			MemberInfos: MemberInfoSlice{o},
		}
	} else {
		related.R.MemberInfos = append(related.R.MemberInfos, o)
	}

	return nil
}

// MemberInfos retrieves all the records using an executor.
func MemberInfos(mods ...qm.QueryMod) memberInfoQuery {
	mods = append(mods, qm.From("\"member_infos\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"member_infos\".*"})
	}

	return memberInfoQuery{q}
}

// FindMemberInfo retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMemberInfo(ctx context.Context, exec boil.ContextExecutor, memberInfoID int, selectCols ...string) (*MemberInfo, error) {
	memberInfoObj := &MemberInfo{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"member_infos\" where \"member_info_id\"=$1", sel,
	)

	q := queries.Raw(query, memberInfoID)

	err := q.Bind(ctx, exec, memberInfoObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from member_infos")
	}

	if err = memberInfoObj.doAfterSelectHooks(ctx, exec); err != nil {
		return memberInfoObj, err
	}

	return memberInfoObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MemberInfo) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no member_infos provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(memberInfoColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	memberInfoInsertCacheMut.RLock()
	cache, cached := memberInfoInsertCache[key]
	memberInfoInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			memberInfoAllColumns,
			memberInfoColumnsWithDefault,
			memberInfoColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(memberInfoType, memberInfoMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(memberInfoType, memberInfoMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"member_infos\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"member_infos\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into member_infos")
	}

	if !cached {
		memberInfoInsertCacheMut.Lock()
		memberInfoInsertCache[key] = cache
		memberInfoInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the MemberInfo.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MemberInfo) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	memberInfoUpdateCacheMut.RLock()
	cache, cached := memberInfoUpdateCache[key]
	memberInfoUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			memberInfoAllColumns,
			memberInfoPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update member_infos, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"member_infos\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, memberInfoPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(memberInfoType, memberInfoMapping, append(wl, memberInfoPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update member_infos row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for member_infos")
	}

	if !cached {
		memberInfoUpdateCacheMut.Lock()
		memberInfoUpdateCache[key] = cache
		memberInfoUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q memberInfoQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for member_infos")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for member_infos")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MemberInfoSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), memberInfoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"member_infos\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, memberInfoPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in memberInfo slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all memberInfo")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MemberInfo) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no member_infos provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(memberInfoColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	memberInfoUpsertCacheMut.RLock()
	cache, cached := memberInfoUpsertCache[key]
	memberInfoUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			memberInfoAllColumns,
			memberInfoColumnsWithDefault,
			memberInfoColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			memberInfoAllColumns,
			memberInfoPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert member_infos, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(memberInfoPrimaryKeyColumns))
			copy(conflict, memberInfoPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"member_infos\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(memberInfoType, memberInfoMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(memberInfoType, memberInfoMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert member_infos")
	}

	if !cached {
		memberInfoUpsertCacheMut.Lock()
		memberInfoUpsertCache[key] = cache
		memberInfoUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single MemberInfo record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MemberInfo) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no MemberInfo provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), memberInfoPrimaryKeyMapping)
	sql := "DELETE FROM \"member_infos\" WHERE \"member_info_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from member_infos")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for member_infos")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q memberInfoQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no memberInfoQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from member_infos")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for member_infos")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MemberInfoSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(memberInfoBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), memberInfoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"member_infos\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, memberInfoPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from memberInfo slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for member_infos")
	}

	if len(memberInfoAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MemberInfo) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMemberInfo(ctx, exec, o.MemberInfoID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MemberInfoSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MemberInfoSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), memberInfoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"member_infos\".* FROM \"member_infos\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, memberInfoPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MemberInfoSlice")
	}

	*o = slice

	return nil
}

// MemberInfoExists checks if the MemberInfo row exists.
func MemberInfoExists(ctx context.Context, exec boil.ContextExecutor, memberInfoID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"member_infos\" where \"member_info_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, memberInfoID)
	}
	row := exec.QueryRowContext(ctx, sql, memberInfoID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if member_infos exists")
	}

	return exists, nil
}
