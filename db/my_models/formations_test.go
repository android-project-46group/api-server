// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testFormations(t *testing.T) {
	t.Parallel()

	query := Formations()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testFormationsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Formation{}
	if err = randomize.Struct(seed, o, formationDBTypes, true, formationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Formation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Formations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFormationsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Formation{}
	if err = randomize.Struct(seed, o, formationDBTypes, true, formationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Formation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Formations().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Formations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFormationsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Formation{}
	if err = randomize.Struct(seed, o, formationDBTypes, true, formationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Formation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := FormationSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Formations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFormationsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Formation{}
	if err = randomize.Struct(seed, o, formationDBTypes, true, formationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Formation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := FormationExists(ctx, tx, o.FormationID)
	if err != nil {
		t.Errorf("Unable to check if Formation exists: %s", err)
	}
	if !e {
		t.Errorf("Expected FormationExists to return true, but got false.")
	}
}

func testFormationsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Formation{}
	if err = randomize.Struct(seed, o, formationDBTypes, true, formationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Formation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	formationFound, err := FindFormation(ctx, tx, o.FormationID)
	if err != nil {
		t.Error(err)
	}

	if formationFound == nil {
		t.Error("want a record, got nil")
	}
}

func testFormationsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Formation{}
	if err = randomize.Struct(seed, o, formationDBTypes, true, formationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Formation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Formations().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testFormationsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Formation{}
	if err = randomize.Struct(seed, o, formationDBTypes, true, formationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Formation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Formations().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testFormationsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	formationOne := &Formation{}
	formationTwo := &Formation{}
	if err = randomize.Struct(seed, formationOne, formationDBTypes, false, formationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Formation struct: %s", err)
	}
	if err = randomize.Struct(seed, formationTwo, formationDBTypes, false, formationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Formation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = formationOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = formationTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Formations().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testFormationsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	formationOne := &Formation{}
	formationTwo := &Formation{}
	if err = randomize.Struct(seed, formationOne, formationDBTypes, false, formationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Formation struct: %s", err)
	}
	if err = randomize.Struct(seed, formationTwo, formationDBTypes, false, formationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Formation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = formationOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = formationTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Formations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func formationBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Formation) error {
	*o = Formation{}
	return nil
}

func formationAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Formation) error {
	*o = Formation{}
	return nil
}

func formationAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Formation) error {
	*o = Formation{}
	return nil
}

func formationBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Formation) error {
	*o = Formation{}
	return nil
}

func formationAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Formation) error {
	*o = Formation{}
	return nil
}

func formationBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Formation) error {
	*o = Formation{}
	return nil
}

func formationAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Formation) error {
	*o = Formation{}
	return nil
}

func formationBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Formation) error {
	*o = Formation{}
	return nil
}

func formationAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Formation) error {
	*o = Formation{}
	return nil
}

func testFormationsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Formation{}
	o := &Formation{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, formationDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Formation object: %s", err)
	}

	AddFormationHook(boil.BeforeInsertHook, formationBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	formationBeforeInsertHooks = []FormationHook{}

	AddFormationHook(boil.AfterInsertHook, formationAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	formationAfterInsertHooks = []FormationHook{}

	AddFormationHook(boil.AfterSelectHook, formationAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	formationAfterSelectHooks = []FormationHook{}

	AddFormationHook(boil.BeforeUpdateHook, formationBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	formationBeforeUpdateHooks = []FormationHook{}

	AddFormationHook(boil.AfterUpdateHook, formationAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	formationAfterUpdateHooks = []FormationHook{}

	AddFormationHook(boil.BeforeDeleteHook, formationBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	formationBeforeDeleteHooks = []FormationHook{}

	AddFormationHook(boil.AfterDeleteHook, formationAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	formationAfterDeleteHooks = []FormationHook{}

	AddFormationHook(boil.BeforeUpsertHook, formationBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	formationBeforeUpsertHooks = []FormationHook{}

	AddFormationHook(boil.AfterUpsertHook, formationAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	formationAfterUpsertHooks = []FormationHook{}
}

func testFormationsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Formation{}
	if err = randomize.Struct(seed, o, formationDBTypes, true, formationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Formation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Formations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testFormationsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Formation{}
	if err = randomize.Struct(seed, o, formationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Formation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(formationColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Formations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testFormationToOneGroupUsingGroup(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Formation
	var foreign Group

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, formationDBTypes, false, formationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Formation struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, groupDBTypes, false, groupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Group struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.GroupID = foreign.GroupID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Group().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.GroupID != foreign.GroupID {
		t.Errorf("want: %v, got %v", foreign.GroupID, check.GroupID)
	}

	slice := FormationSlice{&local}
	if err = local.L.LoadGroup(ctx, tx, false, (*[]*Formation)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Group == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Group = nil
	if err = local.L.LoadGroup(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Group == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testFormationToOneMemberUsingMember(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Formation
	var foreign Member

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, formationDBTypes, false, formationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Formation struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, memberDBTypes, false, memberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Member struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.MemberID = foreign.MemberID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Member().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.MemberID != foreign.MemberID {
		t.Errorf("want: %v, got %v", foreign.MemberID, check.MemberID)
	}

	slice := FormationSlice{&local}
	if err = local.L.LoadMember(ctx, tx, false, (*[]*Formation)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Member == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Member = nil
	if err = local.L.LoadMember(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Member == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testFormationToOneSetOpGroupUsingGroup(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Formation
	var b, c Group

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, formationDBTypes, false, strmangle.SetComplement(formationPrimaryKeyColumns, formationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, groupDBTypes, false, strmangle.SetComplement(groupPrimaryKeyColumns, groupColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, groupDBTypes, false, strmangle.SetComplement(groupPrimaryKeyColumns, groupColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Group{&b, &c} {
		err = a.SetGroup(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Group != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Formations[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.GroupID != x.GroupID {
			t.Error("foreign key was wrong value", a.GroupID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.GroupID))
		reflect.Indirect(reflect.ValueOf(&a.GroupID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.GroupID != x.GroupID {
			t.Error("foreign key was wrong value", a.GroupID, x.GroupID)
		}
	}
}
func testFormationToOneSetOpMemberUsingMember(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Formation
	var b, c Member

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, formationDBTypes, false, strmangle.SetComplement(formationPrimaryKeyColumns, formationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, memberDBTypes, false, strmangle.SetComplement(memberPrimaryKeyColumns, memberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, memberDBTypes, false, strmangle.SetComplement(memberPrimaryKeyColumns, memberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Member{&b, &c} {
		err = a.SetMember(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Member != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Formations[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.MemberID != x.MemberID {
			t.Error("foreign key was wrong value", a.MemberID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.MemberID))
		reflect.Indirect(reflect.ValueOf(&a.MemberID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.MemberID != x.MemberID {
			t.Error("foreign key was wrong value", a.MemberID, x.MemberID)
		}
	}
}

func testFormationsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Formation{}
	if err = randomize.Struct(seed, o, formationDBTypes, true, formationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Formation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testFormationsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Formation{}
	if err = randomize.Struct(seed, o, formationDBTypes, true, formationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Formation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := FormationSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testFormationsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Formation{}
	if err = randomize.Struct(seed, o, formationDBTypes, true, formationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Formation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Formations().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	formationDBTypes = map[string]string{`FormationID`: `integer`, `GroupID`: `integer`, `MemberID`: `integer`, `Single`: `character varying`, `SongTitle`: `character varying`, `Position`: `character varying`}
	_                = bytes.MinRead
)

func testFormationsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(formationPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(formationAllColumns) == len(formationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Formation{}
	if err = randomize.Struct(seed, o, formationDBTypes, true, formationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Formation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Formations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, formationDBTypes, true, formationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Formation struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testFormationsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(formationAllColumns) == len(formationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Formation{}
	if err = randomize.Struct(seed, o, formationDBTypes, true, formationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Formation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Formations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, formationDBTypes, true, formationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Formation struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(formationAllColumns, formationPrimaryKeyColumns) {
		fields = formationAllColumns
	} else {
		fields = strmangle.SetComplement(
			formationAllColumns,
			formationPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := FormationSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testFormationsUpsert(t *testing.T) {
	t.Parallel()

	if len(formationAllColumns) == len(formationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Formation{}
	if err = randomize.Struct(seed, &o, formationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Formation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Formation: %s", err)
	}

	count, err := Formations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, formationDBTypes, false, formationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Formation struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Formation: %s", err)
	}

	count, err = Formations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
