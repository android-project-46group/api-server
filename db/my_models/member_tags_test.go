// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testMemberTags(t *testing.T) {
	t.Parallel()

	query := MemberTags()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testMemberTagsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MemberTag{}
	if err = randomize.Struct(seed, o, memberTagDBTypes, true, memberTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MemberTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MemberTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMemberTagsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MemberTag{}
	if err = randomize.Struct(seed, o, memberTagDBTypes, true, memberTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MemberTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := MemberTags().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MemberTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMemberTagsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MemberTag{}
	if err = randomize.Struct(seed, o, memberTagDBTypes, true, memberTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MemberTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MemberTagSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MemberTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMemberTagsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MemberTag{}
	if err = randomize.Struct(seed, o, memberTagDBTypes, true, memberTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MemberTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := MemberTagExists(ctx, tx, o.MemberTagID)
	if err != nil {
		t.Errorf("Unable to check if MemberTag exists: %s", err)
	}
	if !e {
		t.Errorf("Expected MemberTagExists to return true, but got false.")
	}
}

func testMemberTagsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MemberTag{}
	if err = randomize.Struct(seed, o, memberTagDBTypes, true, memberTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MemberTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	memberTagFound, err := FindMemberTag(ctx, tx, o.MemberTagID)
	if err != nil {
		t.Error(err)
	}

	if memberTagFound == nil {
		t.Error("want a record, got nil")
	}
}

func testMemberTagsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MemberTag{}
	if err = randomize.Struct(seed, o, memberTagDBTypes, true, memberTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MemberTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = MemberTags().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testMemberTagsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MemberTag{}
	if err = randomize.Struct(seed, o, memberTagDBTypes, true, memberTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MemberTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := MemberTags().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testMemberTagsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	memberTagOne := &MemberTag{}
	memberTagTwo := &MemberTag{}
	if err = randomize.Struct(seed, memberTagOne, memberTagDBTypes, false, memberTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MemberTag struct: %s", err)
	}
	if err = randomize.Struct(seed, memberTagTwo, memberTagDBTypes, false, memberTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MemberTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = memberTagOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = memberTagTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := MemberTags().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testMemberTagsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	memberTagOne := &MemberTag{}
	memberTagTwo := &MemberTag{}
	if err = randomize.Struct(seed, memberTagOne, memberTagDBTypes, false, memberTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MemberTag struct: %s", err)
	}
	if err = randomize.Struct(seed, memberTagTwo, memberTagDBTypes, false, memberTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MemberTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = memberTagOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = memberTagTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MemberTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func memberTagBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *MemberTag) error {
	*o = MemberTag{}
	return nil
}

func memberTagAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *MemberTag) error {
	*o = MemberTag{}
	return nil
}

func memberTagAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *MemberTag) error {
	*o = MemberTag{}
	return nil
}

func memberTagBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *MemberTag) error {
	*o = MemberTag{}
	return nil
}

func memberTagAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *MemberTag) error {
	*o = MemberTag{}
	return nil
}

func memberTagBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *MemberTag) error {
	*o = MemberTag{}
	return nil
}

func memberTagAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *MemberTag) error {
	*o = MemberTag{}
	return nil
}

func memberTagBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *MemberTag) error {
	*o = MemberTag{}
	return nil
}

func memberTagAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *MemberTag) error {
	*o = MemberTag{}
	return nil
}

func testMemberTagsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &MemberTag{}
	o := &MemberTag{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, memberTagDBTypes, false); err != nil {
		t.Errorf("Unable to randomize MemberTag object: %s", err)
	}

	AddMemberTagHook(boil.BeforeInsertHook, memberTagBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	memberTagBeforeInsertHooks = []MemberTagHook{}

	AddMemberTagHook(boil.AfterInsertHook, memberTagAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	memberTagAfterInsertHooks = []MemberTagHook{}

	AddMemberTagHook(boil.AfterSelectHook, memberTagAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	memberTagAfterSelectHooks = []MemberTagHook{}

	AddMemberTagHook(boil.BeforeUpdateHook, memberTagBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	memberTagBeforeUpdateHooks = []MemberTagHook{}

	AddMemberTagHook(boil.AfterUpdateHook, memberTagAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	memberTagAfterUpdateHooks = []MemberTagHook{}

	AddMemberTagHook(boil.BeforeDeleteHook, memberTagBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	memberTagBeforeDeleteHooks = []MemberTagHook{}

	AddMemberTagHook(boil.AfterDeleteHook, memberTagAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	memberTagAfterDeleteHooks = []MemberTagHook{}

	AddMemberTagHook(boil.BeforeUpsertHook, memberTagBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	memberTagBeforeUpsertHooks = []MemberTagHook{}

	AddMemberTagHook(boil.AfterUpsertHook, memberTagAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	memberTagAfterUpsertHooks = []MemberTagHook{}
}

func testMemberTagsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MemberTag{}
	if err = randomize.Struct(seed, o, memberTagDBTypes, true, memberTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MemberTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MemberTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMemberTagsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MemberTag{}
	if err = randomize.Struct(seed, o, memberTagDBTypes, true); err != nil {
		t.Errorf("Unable to randomize MemberTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(memberTagColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := MemberTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMemberTagToOneMemberUsingMember(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local MemberTag
	var foreign Member

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, memberTagDBTypes, false, memberTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MemberTag struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, memberDBTypes, false, memberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Member struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.MemberID = foreign.MemberID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Member().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.MemberID != foreign.MemberID {
		t.Errorf("want: %v, got %v", foreign.MemberID, check.MemberID)
	}

	slice := MemberTagSlice{&local}
	if err = local.L.LoadMember(ctx, tx, false, (*[]*MemberTag)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Member == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Member = nil
	if err = local.L.LoadMember(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Member == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testMemberTagToOneTagUsingTag(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local MemberTag
	var foreign Tag

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, memberTagDBTypes, false, memberTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MemberTag struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, tagDBTypes, false, tagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tag struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.TagID = foreign.TagID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Tag().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.TagID != foreign.TagID {
		t.Errorf("want: %v, got %v", foreign.TagID, check.TagID)
	}

	slice := MemberTagSlice{&local}
	if err = local.L.LoadTag(ctx, tx, false, (*[]*MemberTag)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Tag == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Tag = nil
	if err = local.L.LoadTag(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Tag == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testMemberTagToOneSetOpMemberUsingMember(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MemberTag
	var b, c Member

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, memberTagDBTypes, false, strmangle.SetComplement(memberTagPrimaryKeyColumns, memberTagColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, memberDBTypes, false, strmangle.SetComplement(memberPrimaryKeyColumns, memberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, memberDBTypes, false, strmangle.SetComplement(memberPrimaryKeyColumns, memberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Member{&b, &c} {
		err = a.SetMember(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Member != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.MemberTags[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.MemberID != x.MemberID {
			t.Error("foreign key was wrong value", a.MemberID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.MemberID))
		reflect.Indirect(reflect.ValueOf(&a.MemberID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.MemberID != x.MemberID {
			t.Error("foreign key was wrong value", a.MemberID, x.MemberID)
		}
	}
}
func testMemberTagToOneSetOpTagUsingTag(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MemberTag
	var b, c Tag

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, memberTagDBTypes, false, strmangle.SetComplement(memberTagPrimaryKeyColumns, memberTagColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, tagDBTypes, false, strmangle.SetComplement(tagPrimaryKeyColumns, tagColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, tagDBTypes, false, strmangle.SetComplement(tagPrimaryKeyColumns, tagColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Tag{&b, &c} {
		err = a.SetTag(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Tag != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.MemberTags[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.TagID != x.TagID {
			t.Error("foreign key was wrong value", a.TagID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.TagID))
		reflect.Indirect(reflect.ValueOf(&a.TagID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.TagID != x.TagID {
			t.Error("foreign key was wrong value", a.TagID, x.TagID)
		}
	}
}

func testMemberTagsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MemberTag{}
	if err = randomize.Struct(seed, o, memberTagDBTypes, true, memberTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MemberTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testMemberTagsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MemberTag{}
	if err = randomize.Struct(seed, o, memberTagDBTypes, true, memberTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MemberTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MemberTagSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testMemberTagsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MemberTag{}
	if err = randomize.Struct(seed, o, memberTagDBTypes, true, memberTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MemberTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := MemberTags().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	memberTagDBTypes = map[string]string{`MemberTagID`: `integer`, `MemberID`: `integer`, `TagID`: `integer`}
	_                = bytes.MinRead
)

func testMemberTagsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(memberTagPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(memberTagAllColumns) == len(memberTagPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &MemberTag{}
	if err = randomize.Struct(seed, o, memberTagDBTypes, true, memberTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MemberTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MemberTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, memberTagDBTypes, true, memberTagPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MemberTag struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testMemberTagsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(memberTagAllColumns) == len(memberTagPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &MemberTag{}
	if err = randomize.Struct(seed, o, memberTagDBTypes, true, memberTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MemberTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MemberTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, memberTagDBTypes, true, memberTagPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MemberTag struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(memberTagAllColumns, memberTagPrimaryKeyColumns) {
		fields = memberTagAllColumns
	} else {
		fields = strmangle.SetComplement(
			memberTagAllColumns,
			memberTagPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := MemberTagSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testMemberTagsUpsert(t *testing.T) {
	t.Parallel()

	if len(memberTagAllColumns) == len(memberTagPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := MemberTag{}
	if err = randomize.Struct(seed, &o, memberTagDBTypes, true); err != nil {
		t.Errorf("Unable to randomize MemberTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert MemberTag: %s", err)
	}

	count, err := MemberTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, memberTagDBTypes, false, memberTagPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MemberTag struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert MemberTag: %s", err)
	}

	count, err = MemberTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
