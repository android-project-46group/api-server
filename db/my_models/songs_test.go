// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testSongs(t *testing.T) {
	t.Parallel()

	query := Songs()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testSongsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Song{}
	if err = randomize.Struct(seed, o, songDBTypes, true, songColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Song struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Songs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSongsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Song{}
	if err = randomize.Struct(seed, o, songDBTypes, true, songColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Song struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Songs().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Songs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSongsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Song{}
	if err = randomize.Struct(seed, o, songDBTypes, true, songColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Song struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SongSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Songs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSongsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Song{}
	if err = randomize.Struct(seed, o, songDBTypes, true, songColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Song struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := SongExists(ctx, tx, o.SongID)
	if err != nil {
		t.Errorf("Unable to check if Song exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SongExists to return true, but got false.")
	}
}

func testSongsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Song{}
	if err = randomize.Struct(seed, o, songDBTypes, true, songColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Song struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	songFound, err := FindSong(ctx, tx, o.SongID)
	if err != nil {
		t.Error(err)
	}

	if songFound == nil {
		t.Error("want a record, got nil")
	}
}

func testSongsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Song{}
	if err = randomize.Struct(seed, o, songDBTypes, true, songColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Song struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Songs().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testSongsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Song{}
	if err = randomize.Struct(seed, o, songDBTypes, true, songColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Song struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Songs().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSongsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	songOne := &Song{}
	songTwo := &Song{}
	if err = randomize.Struct(seed, songOne, songDBTypes, false, songColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Song struct: %s", err)
	}
	if err = randomize.Struct(seed, songTwo, songDBTypes, false, songColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Song struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = songOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = songTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Songs().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSongsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	songOne := &Song{}
	songTwo := &Song{}
	if err = randomize.Struct(seed, songOne, songDBTypes, false, songColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Song struct: %s", err)
	}
	if err = randomize.Struct(seed, songTwo, songDBTypes, false, songColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Song struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = songOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = songTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Songs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func songBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Song) error {
	*o = Song{}
	return nil
}

func songAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Song) error {
	*o = Song{}
	return nil
}

func songAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Song) error {
	*o = Song{}
	return nil
}

func songBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Song) error {
	*o = Song{}
	return nil
}

func songAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Song) error {
	*o = Song{}
	return nil
}

func songBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Song) error {
	*o = Song{}
	return nil
}

func songAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Song) error {
	*o = Song{}
	return nil
}

func songBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Song) error {
	*o = Song{}
	return nil
}

func songAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Song) error {
	*o = Song{}
	return nil
}

func testSongsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Song{}
	o := &Song{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, songDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Song object: %s", err)
	}

	AddSongHook(boil.BeforeInsertHook, songBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	songBeforeInsertHooks = []SongHook{}

	AddSongHook(boil.AfterInsertHook, songAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	songAfterInsertHooks = []SongHook{}

	AddSongHook(boil.AfterSelectHook, songAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	songAfterSelectHooks = []SongHook{}

	AddSongHook(boil.BeforeUpdateHook, songBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	songBeforeUpdateHooks = []SongHook{}

	AddSongHook(boil.AfterUpdateHook, songAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	songAfterUpdateHooks = []SongHook{}

	AddSongHook(boil.BeforeDeleteHook, songBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	songBeforeDeleteHooks = []SongHook{}

	AddSongHook(boil.AfterDeleteHook, songAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	songAfterDeleteHooks = []SongHook{}

	AddSongHook(boil.BeforeUpsertHook, songBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	songBeforeUpsertHooks = []SongHook{}

	AddSongHook(boil.AfterUpsertHook, songAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	songAfterUpsertHooks = []SongHook{}
}

func testSongsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Song{}
	if err = randomize.Struct(seed, o, songDBTypes, true, songColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Song struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Songs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSongsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Song{}
	if err = randomize.Struct(seed, o, songDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Song struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(songColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Songs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSongToManyPositions(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Song
	var b, c Position

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, songDBTypes, true, songColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Song struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, positionDBTypes, false, positionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, positionDBTypes, false, positionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.SongID = a.SongID
	c.SongID = a.SongID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Positions().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.SongID == b.SongID {
			bFound = true
		}
		if v.SongID == c.SongID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SongSlice{&a}
	if err = a.L.LoadPositions(ctx, tx, false, (*[]*Song)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Positions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Positions = nil
	if err = a.L.LoadPositions(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Positions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testSongToManyAddOpPositions(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Song
	var b, c, d, e Position

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, songDBTypes, false, strmangle.SetComplement(songPrimaryKeyColumns, songColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Position{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, positionDBTypes, false, strmangle.SetComplement(positionPrimaryKeyColumns, positionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Position{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddPositions(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.SongID != first.SongID {
			t.Error("foreign key was wrong value", a.SongID, first.SongID)
		}
		if a.SongID != second.SongID {
			t.Error("foreign key was wrong value", a.SongID, second.SongID)
		}

		if first.R.Song != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Song != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Positions[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Positions[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Positions().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testSongToOneFormationUsingFormation(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Song
	var foreign Formation

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, songDBTypes, false, songColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Song struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, formationDBTypes, false, formationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Formation struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.FormationID = foreign.FormationID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Formation().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.FormationID != foreign.FormationID {
		t.Errorf("want: %v, got %v", foreign.FormationID, check.FormationID)
	}

	slice := SongSlice{&local}
	if err = local.L.LoadFormation(ctx, tx, false, (*[]*Song)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Formation == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Formation = nil
	if err = local.L.LoadFormation(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Formation == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testSongToOneGroupUsingGroup(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Song
	var foreign Group

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, songDBTypes, false, songColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Song struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, groupDBTypes, false, groupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Group struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.GroupID = foreign.GroupID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Group().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.GroupID != foreign.GroupID {
		t.Errorf("want: %v, got %v", foreign.GroupID, check.GroupID)
	}

	slice := SongSlice{&local}
	if err = local.L.LoadGroup(ctx, tx, false, (*[]*Song)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Group == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Group = nil
	if err = local.L.LoadGroup(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Group == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testSongToOneSetOpFormationUsingFormation(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Song
	var b, c Formation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, songDBTypes, false, strmangle.SetComplement(songPrimaryKeyColumns, songColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, formationDBTypes, false, strmangle.SetComplement(formationPrimaryKeyColumns, formationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, formationDBTypes, false, strmangle.SetComplement(formationPrimaryKeyColumns, formationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Formation{&b, &c} {
		err = a.SetFormation(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Formation != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Songs[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.FormationID != x.FormationID {
			t.Error("foreign key was wrong value", a.FormationID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.FormationID))
		reflect.Indirect(reflect.ValueOf(&a.FormationID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.FormationID != x.FormationID {
			t.Error("foreign key was wrong value", a.FormationID, x.FormationID)
		}
	}
}
func testSongToOneSetOpGroupUsingGroup(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Song
	var b, c Group

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, songDBTypes, false, strmangle.SetComplement(songPrimaryKeyColumns, songColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, groupDBTypes, false, strmangle.SetComplement(groupPrimaryKeyColumns, groupColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, groupDBTypes, false, strmangle.SetComplement(groupPrimaryKeyColumns, groupColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Group{&b, &c} {
		err = a.SetGroup(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Group != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Songs[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.GroupID != x.GroupID {
			t.Error("foreign key was wrong value", a.GroupID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.GroupID))
		reflect.Indirect(reflect.ValueOf(&a.GroupID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.GroupID != x.GroupID {
			t.Error("foreign key was wrong value", a.GroupID, x.GroupID)
		}
	}
}

func testSongsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Song{}
	if err = randomize.Struct(seed, o, songDBTypes, true, songColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Song struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSongsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Song{}
	if err = randomize.Struct(seed, o, songDBTypes, true, songColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Song struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SongSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSongsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Song{}
	if err = randomize.Struct(seed, o, songDBTypes, true, songColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Song struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Songs().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	songDBTypes = map[string]string{`SongID`: `integer`, `GroupID`: `integer`, `FormationID`: `integer`, `Title`: `character varying`, `Single`: `character varying`}
	_           = bytes.MinRead
)

func testSongsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(songPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(songAllColumns) == len(songPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Song{}
	if err = randomize.Struct(seed, o, songDBTypes, true, songColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Song struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Songs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, songDBTypes, true, songPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Song struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testSongsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(songAllColumns) == len(songPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Song{}
	if err = randomize.Struct(seed, o, songDBTypes, true, songColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Song struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Songs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, songDBTypes, true, songPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Song struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(songAllColumns, songPrimaryKeyColumns) {
		fields = songAllColumns
	} else {
		fields = strmangle.SetComplement(
			songAllColumns,
			songPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := SongSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testSongsUpsert(t *testing.T) {
	t.Parallel()

	if len(songAllColumns) == len(songPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Song{}
	if err = randomize.Struct(seed, &o, songDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Song struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Song: %s", err)
	}

	count, err := Songs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, songDBTypes, false, songPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Song struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Song: %s", err)
	}

	count, err = Songs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
